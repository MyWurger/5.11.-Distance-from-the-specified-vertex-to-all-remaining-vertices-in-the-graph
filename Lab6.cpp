/********************************************************************************
 * Л А Б О Р А Т О Р Н А Я   Р А Б О Т А  №6  З А   5   С Е М Е С Т Р   С  +  + *
 *------------------------------------------------------------------------------*
 * Project Type  : Win64 Console Application                                    *
 * Project Name  : Teor_Grph_Lab6                                               *
 * File Name     : Lab6. CPP                                                    *
 * Programmer(s) : Викулов Д.Г.  &   Сашин А. Ю.                                *
 * Modifyed By   :                                                              *
 * Created       : 06/10/23                                                     *
 * Last Revision : 12/10/23                                                     *
 * Comment(s)    : Программа, рассчитывающая расстояние от указанной вершины до *
 *                 всех остальных вершин в графе. Результатом работы является   *
 *			       перечисление пар вершин, и соответствующих расстояний между  *
 *			       ними.                                                        *
 ********************************************************************************/


#include <iostream>              // стандартные потоки ввода/вывода
#include <vector>                // работа с векторами для удобства быстрого извлечения и удаления элементов
#include <fstream>               // работа с потоками ввода/вывода для файла
#include <iomanip>               // библиотека с модификатором setw
#include <string>                // работа со строками
#include <queue>                 // работа с очередями
#include <graphviz/gvc.h>        // библиотека Graphviz для графического изображения графа по матрице смежности
#include <opencv2/opencv.hpp>    // заголовок, подтягивающий все функции OpenCv

using namespace std;             // используем пространство имён std



/*******************************************************************/
/*            Г Л О Б А Л Ь Н Ы Е    К О Н С Т А Н Т Ы             */
/*******************************************************************/

// путь к файлу через константный указатель
// Входные файлы
// ТЕСТЫ ДЛЯ МАТРИЦЫ СМЕЖНОСТИ
const char* FNAMEIN = "matrix_t6_001.txt";  // файл с матрицей смежности
//const char* FNAMEIN = "matrix_t6_002.txt";
//const char* FNAMEIN = "matrix_t6_003.txt";
//const char* FNAMEIN = "matrix_t6_004.txt";
//const char* FNAMEIN = "matrix_t6_005.txt";
//const char* FNAMEIN = "matrix_t6_006.txt";
//const char* FNAMEIN = "matrix_t6_007.txt";
//const char* FNAMEIN = "matrix_t6_008.txt";
//const char* FNAMEIN = "matrix_t6_009.txt";
//const char* FNAMEIN = "matrix_t6_010.txt";

// ТЕСТЫ ДЛЯ СПИСКА СМЕЖНОСТИ
//const char* FNAMEIN = "list_of_adjacency_t6_010.txt";

// ТЕСТЫ ДЛЯ СПИСКА РЁБЕР
//const char* FNAMEIN = "list_of_edges_t6_001.txt";
//const char* FNAMEIN = "list_of_edges_t6_002.txt";
//const char* FNAMEIN = "list_of_edges_t6_003.txt";
//const char* FNAMEIN = "list_of_edges_t6_004.txt";
//const char* FNAMEIN = "list_of_edges_t6_005.txt";
//const char* FNAMEIN = "list_of_edges_t6_006.txt";
//const char* FNAMEIN = "list_of_edges_t6_007.txt";
//const char* FNAMEIN = "list_of_edges_t6_008.txt";
//const char* FNAMEIN = "list_of_edges_t6_009.txt";
//const char* FNAMEIN = "list_of_edges_t6_010.txt";

// ТЕСТЫ ДЛЯ СПИСКА СМЕЖНОСТИ
//const char* FNAMEIN = "list_of_adjacency_t6_010.txt";

// ВЫХОДНЫЕ ФАЙЛЫ
const char* FNAMEOUT = "Output_File.txt";

// бесконечность для матрицы расстояний
const int INF = 10000;




/*******************************************************************/
/*      Г Л О Б А Л Ь Н Ы Е    Ф А Й Л О В Ы Е    П О Т О К И      */
/*******************************************************************/

 // объявление объекта для потокового ввода данных из файла
ifstream fin;
// объявление объекта для потокового вывода данных в файл
ofstream fout;




/*******************************************************************/
/*                 И Е Р А Р Х И Я   К Л А С С О В                 */
/*******************************************************************/

/*------------------------------------------------------------------------*/
/*                 Graph                  */
/*----------------------------------------*/

class Graph
{
private:
	vector<vector<int>> m_matrix;                             // граф в программе представлен матрицей смежности
	int m_size;                                               // размер матрицы смежности (количество вершин в графе)

public:
	// конструктор
	Graph();
	// деструктор
	~Graph();
	// константный геттер для получения значения размера
	const int GetSize();
	// функция возвращающая True, если граф ориентированный, False, если граф простой;
	bool is_directed();
	// функция, возвращающая матрицу смежности
	vector<vector<int>> adjacency_matrix();
	// весовая функция, принимает номера вершин, возвращает вес ребра, связывающего их;
	int Weight(int Vi, int Vj);
	// функция, принимающая номера вершин и возвращает True, если в графе есть соответствующее ребро / дуга, False, если ребра нет;
	bool is_edge(int Vi, int Vj);
	// функция, возвращающая список вершин, смежных вершине v;
	vector<int> adjacency_list(int v);
	// функция, возвращающая список всех рёбер графа;
	vector<pair<int, int>> list_of_edges_pairs();
	// – функция, возвращающая список всех рёбер графа, инцидентных вершине v / исходящих из вершины v
	vector<pair<int, int>> list_of_edges(int v);
};




/*******************************************************************/
/*              П Р О Т О Т И П Ы    Ф У Н К Ц И Й                 */
/*******************************************************************/

// сохранение графа как фотографии
string drawGraph(const vector<vector<int>>& adjacencyMatrix);     // объявление константной ссылки на двумерный вектор adjacencyMatrix, содержащий целочисленные значения 

// вывод графа на экран в виде картинки
void OpenImage(const vector<vector<int>>& adjacencyMatrix);       // объявление константной ссылки на двумерный вектор adjacencyMatrix, содержащий целочисленные значения 

// вывод матрицы смежности на экран
void PrintMatrix(vector<vector<int>> matrix);                     // матрица, которую необходимо вывести на экран. Передача по значению

// печать справки и авторов работы
void Usloviya();

// печать условий выбора алгоритма
void Usloviya_1();

// Вспомогательная функция для нахождения индекса вершины с минимальным расстоянием
int findMinDistance(vector<int> distance,                         // вектор расстояний от начальной вершины до всех остальных
	                vector<bool> visited);                        // посещённость вершин

// Алгоритм Дейкстры для нахождения кратчайшего пути и вывода вершин геодезической цепи
void Dijkstra(vector<vector<int>> matrix,                         // исходная матрица для определения наличия пути между вершинами
	          int start,                                          // вершина, с которой начинается алгоритм
	          vector<int>& ways);                                 // расстояние от данной вершины до всех остальных в графе

// Алгоритм Белмана-Форда-Мура
void BellForMur(vector<vector<int>>graph,                         // матрица смежности графа с добавленной нулевой вершиной
	            vector<int>& ways,                                // кратчайшие расстояния от этой вершины до всех остальных
	            int start,                                        // индекс добавленной вершины
	            bool print);                                      // флаг печати в файл

// Алгоритм Левита
void Levit(vector<vector<int>> m_matrix,                          // матрица смежности графа
	       vector<int>& ways,                                     // матрица расстояний от данной вершины до всех остальных
	       int StartVertex,                                       // вершина, от которой будем смотреть расстояния
	       bool print);                                           // флаг печати в файл

// печать расстояний от данной вершины до остальных на экран
void print_distance(vector<int> distance,                         // вектор расстояний от данной вершины до всех остальных
	                int StartVertex);                             // начальная вершина, чтобы не выводить путь саму в себя

// печать расстояний от данной вершины до остальных в файл
void print_distanceToFile(vector<int> distance,                   // вектор расстояний от данной вершины до всех остальных
	                      int StartVertex);                       // начальная вершина, чтобы не выводить путь саму в себя

// вывод матрицы  в файл
void PrintMatrToFile(vector<vector<int>> matrix);                 // матрица, которую необходимо вывести в файл. Передача по значению


// конструктор - считывание матрицы из файла
Graph::Graph()
{
	fin.open(FNAMEIN);            // связываем объект с файлом
	if (!fin.is_open())           // файл не найден
	{
		cout << "Файла с таким именем нет. Невозможно осуществить чтение";
		fin.close();              // закрыть файл для чтения
		system("pause");
		exit(0);                  // возвращаем значение, соответствующее типу в caller
	}// if (!fin.is_open())

	int value;                    // очередной считываемый символ
	char key;                     // ключ для указания пользователем варианта задания графа в файле
	bool spravka = true;          // ключ для вывода справки на экран
	vector<int> row;              // вектор для считывания промежуточных значений из файла построчно
	vector<vector<int>> matrix;   // вспомогательная матрица смежности

	// повтор ввода задания графа, когда пользователь захотел вывести на экран справку
	while (spravka)
	{
		cout << "\x1b[30m В В Е Д И Т Е   К Л Ю Ч   И Л И   <h>   Д Л Я   В Ы З О В А   П О Д С К А З К И : \x1b[30m";
		// пользователь ввёл ключ для того, чтобы явно указать, каким способом он задал граф
		cin >> key;
		cout << "\n Вы ввели: " << key << endl;

		// в зависимости от значения ключа
		switch (key)
		{
			// работа с матрицей смежности
		case('m'):
		case('M'):
		{
			cout << "\n\t\t\t\t\x1b[32m В Ы   В Ы Б Р А Л И   Т И П   З А Д А Н И Я   -   М А Т Р И Ц А   С М Е Ж Н О С Т И\n\n\x1b[30m\n";
			// считываем очередное число из файла
			while (fin >> value)
			{
				// после считывания каждой строки очищаем вектор строки
				row.clear();
				// загоняем в вектор первый считанный элемент от первого while (fin >> value)
				row.push_back(value);
				// считываем все остальные элементы строки, пока не нашли символ её окончания - \n
				while (fin.peek() != '\n' && fin >> value)
				{
					row.push_back(value);
				}// while (fin.peek() != '\n' && fin >> value)

				// кладем в матрицу считанную строку. Все строки имеют одинаковый размер, так как работаем с матрицей смежности
				m_matrix.push_back(row);

			}// while (fin >> value)

			// повторять ввод не надо. Матрица заполнена
			spravka = false;
			break;
		}

		// работа со списком рёбер
		case('e'):
		case('E'):
		{
			cout << "\n\t\t\t\t\x1b[32m В Ы   В Ы Б Р А Л И   Т И П   З А Д А Н И Я   -   С П И С О К   Р Ё Б Е Р\n\n\x1b[30m\n";

			// считываем значения из файла в вектор
			// в векторе будут находиться с чередованием через три элементы: начальная вершина, конечная вершина и вес ребра
			while (fin >> value)
			{
				// после считывания каждой строки очищаем вектор строки
				row.clear();
				// загоняем в вектор первый считанный элемент от первого while (fin >> value)
				row.push_back(value);
				// считываем все остальные элементы строки, пока не нашли символ её окончания - \n
				while (fin.peek() != '\n' && fin >> value)
				{
					row.push_back(value);
				}// while (fin.peek() != '\n' && fin >> value)

				// кладем в матрицу считанную строку. Все строки имеют одинаковый размер, так как работаем с матрицей смежности
				m_matrix.push_back(row);
			}// while (fin >> value)

			// закрыть файл чтения
			fin.close();
			int size_m = m_matrix[m_matrix.size() - 1][0];    // размер матрицы смежности
			vector<vector<int>> vec_1(size_m);                // матрица смежности

			for (int i = 0; i < size_m; i++)                  // задаём размер каждой ячейки vec_1
			{
				vec_1[i].resize(size_m, 0);
			}// for i

			// заполняем матрицу смежности
			for (int i = 0; i < m_matrix.size(); i++)
			{
				if (m_matrix[0].size() == 3)                  // 3 элемент - это вес ребра, если он не указан, то значит он = 1
				{
					vec_1[m_matrix[i][0] - 1][m_matrix[i][1] - 1] = m_matrix[i][2];
				}
				else
				{
					vec_1[m_matrix[i][0] - 1][m_matrix[i][1] - 1] = 1;
				}// if (m_matrix[0].size() == 3)
			}// for i

			// запоминаем матрицу смежности
			m_matrix = vec_1;
			// повторять ввод не надо. Матрица заполнена
			spravka = false;
			break;
		}

		// работаем со списками смежности
		case('l'):
		case('L'):
		{
			cout << "\n\t\t\t\t\x1b[32m В Ы   В Ы Б Р А Л И   Т И П   З А Д А Н И Я   -   С П И С О К   С М Е Ж Н О С Т И\n\n\x1b[30m\n";

			// чтение из файла построчно
			string line;
			int rowNumber = 0;            // номер текущей строки

			// чтение построчное
			while (getline(fin, line))
			{
				// Если строка пустая, заполняем текущую строку нулями
				if (line.empty())
				{
					matrix.push_back(vector<int>(m_size, 0));
				}
				// строка не пустая
				else
				{
					// вектор строки
					vector<int> row;
					// создает поток для чтения значений из строки line. Затем мы можем использовать iss вместе с оператором >> для извлечения значений из строки.
					istringstream iss(line);
					// очередная величина для чтения
					int value;

					// читаем значение из файла и помещаем его в вектор строки
					while (iss >> value)
					{
						row.push_back(value);
					}// while

					// помещаем строку в матрицу
					matrix.push_back(row);
				}// if (line.empty()) 

				// увеличиваем номер строки
				rowNumber++;
			}// while (getline(fin, line)) 

			// файл прочитан - закрываем его
			fin.close();

			m_size = matrix.size();                         // размер матрицы смежности

			vector<vector<int>> vec_1(m_size);              // доп матрица смежности размером m_size

			for (int i = 0; i < m_size; i++)                // задаём размер каждой ячейки доп матрицы смежности
			{
				// заполняем вспомогательную матрицу нулями по всему размеру
				vec_1[i].resize(m_size, 0);
			}// for i

			for (int i = 0; i < m_size; i++)                 // заполняем доп матрицу смежности 
			{
				for (int j = 0; j < matrix[i].size(); j++)
				{
					// единица в тех столбцах, которые перечислены для данной в файле
					vec_1[i][matrix[i][j] - 1] = 1;
				}// for j
			}// for i

			// загоняем значения в основную матрицу смежности
			for (int i = 0; i < m_size; i++)
			{
				row.clear();
				for (int j = 0; j < m_size; ++j)
				{
					row.push_back(vec_1[i][j]);
				}// fot j

				m_matrix.push_back(row);
			}// for i

			// повторять ввод не надо. Матрица заполнена
			spravka = false;
			break;
		}

		// пользователь выбрал справку
		case('h'):
		case('H'):
		{
			// повторить ввод после появления мправки на экране
			spravka = true;
			// выводим условия
			Usloviya();
			break;
		}

		// иначе - пользователь ввёл не тот ключ. Заканчиваем программу с ошибкой
		default:
			cout << "\n\x1b[31m ПЕРЕЗАПУСТИТЕ ПРОГРАММУ И ВВЕДИТЕ ЗНАЧЕНИЕ ИЗ СПИСКА КЛЮЧЕЙ!!!\n\x1b[30m";
			// закрываем файл считывания
			fin.close();
			exit(0);
		}
	}
	// закрываем файл считывания
	fin.close();
	// запоминаем размер считанной/ преобразованной матрицы смежности
	m_size = m_matrix.size();
}

// деструктор
Graph::~Graph()
{
	// пустое тело - векторы уничтожаются автоматически
}

// геттер для получения значения размера
const int Graph::GetSize()
{
	return(m_size);
}


// функция возвращающая True, если граф ориентированный, False, если граф простой;
bool Graph::is_directed()
{
	// идём по строкам
	for (int i = 0; i < m_size; i++)
	{
		// идём по столбцам
		for (int j = 0; j < m_size; j++)
		{
			// если граф неориентированный, то матрица симметрична, так как по ребру можно пройти подвум направлениям
			if (m_matrix[i][j] != m_matrix[j][i])
			{
				return true; // Найдено направленное ребро - граф ориентированный
			}// if (m_matrix[i][j] != m_matrix[j][i])

		}// for j

	}// for i

	return false; // Не найдено направленных ребер - граф неориентированный
}


// функция, возвращающая матрицу смежности
vector<vector<int>> Graph::adjacency_matrix()
{
	return(m_matrix);
}


// весовая функция, принимает номера вершин, возвращает вес ребра, связывающего их;
int Graph::Weight(int Vi, int Vj)

{
	// номера вершин вышли за диапазоны допустимых значений
	if ((Vi >= m_size || Vi < 0) || (Vj >= m_size || Vj < 0))
	{
		cout << "Ошибка! Такой вершины не существует\n";
		// вернули ошибку
		return(-1);
	}

	// если путь существует(в матрице смежности не 0)
	if (m_matrix[Vi][Vj] != 0)
	{
		cout << "Вес ребра между вершинами " << Vi << " и " << Vj << " равен" << m_matrix[Vi][Vj] << endl;
		cout << m_matrix[Vi][Vj] << endl;
		// возвращаем вес ребра между вершинами
		return(m_matrix[Vi][Vj]);
	}// if

	// граф ориентированный. Выводим вес дуги
	else if ((m_matrix[Vi][Vj] != m_matrix[Vj][Vi]) && (m_matrix[Vi][Vj] != 0 || m_matrix[Vj][Vi] != 0))
	{
		cout << "Граф ориентированный. Дуга есть. Направление учитывается. Вес дуги между вершинами " << Vi << " и " << Vj << " равен" << m_matrix[Vi][Vj] << endl;
		// возвращаем вес дуги
		return(m_matrix[Vi][Vj]);
	}// else if

	// ребра между вершинами нет - элемент матрицы смежности равен 0
	else if (m_matrix[Vi][Vj] == 0)
	{
		cout << "Ребра между вершинами " << Vi << " и " << Vj << "нет\n";
		// Вернули нулевое значение
		return(m_matrix[Vi][Vj]);
	}// else if

	// возвращаем обещанное значение
	return(0);
}


// функция, принимающая номера вершин и возвращает True, если в графе есть соответствующее ребро / дуга, False, если ребра нет;
bool Graph::is_edge(int Vi, int Vj)
{
	// номера вершин вышли за диапазоны допустимых значений - дуги нет
	if ((Vi >= m_size || Vi < 0) || (Vj >= m_size || Vj < 0))
	{
		// вернули, что дуги нет
		return(false);
	}// if

	// элемент матрицы смежности не равен 0 - ребро есть
	if (m_matrix[Vi][Vj] != 0)
	{
		// подтверждаем, что ребро есть
		return(true);
	}// if

	// элемент матрицы смежности нулевой - ребра нет
	if (m_matrix[Vi][Vj] == 0)
	{
		// подтверждаем, что ребра нет
		return(false);
	}// if
}


// функция, возвращающая список вершин, смежных вершине v;
vector<int> Graph::adjacency_list(int v)
{
	// список вершин
	vector<int> adjList;

	// Проходим по всем вершинам и проверяем, есть ли ребро между вершиной v и текущей вершиной
	for (int i = 0; i < m_size; i++)
	{
		// путь есть - элемент матрицы не нулевой
		if (m_matrix[v][i] != 0)
		{
			// помещаем вершину в список
			adjList.push_back(i);
		}// if (m_matrix[v][i] != 0)

	}// for i

	// Возвращаем список смежных вершин
	return adjList;
}


// функция, возвращающая список всех рёбер графа;
vector<pair<int, int>> Graph::list_of_edges_pairs()
{
	// вектор пар, содержащий ребро в виде двух инцидентных ему вершин
	vector<pair<int, int>> edges_pairs;
	// идём по всем элементам строки
	for (int i = 0; i < m_size; i++)
	{
		// идём по всем элементам столбца
		for (int j = 0; j < m_size; j++)
		{
			// если элемент не нулевой
			if (m_matrix[i][j] != 0)
			{
				// загрузили пару вершин
				edges_pairs.push_back(make_pair(i, j));
			}// if (m_matrix[i][j] != 0)
		}// for j
	}// for i

	// вернули вектор рёбер (пар вершин)
	return(edges_pairs);
}


// функция, возвращающая список всех рёбер графа, инцидентных вершине v / исходящих из вершины v
vector<pair<int, int>> Graph::list_of_edges(int v)
{
	int count = 0;
	vector<pair<int, int>> edges;         // вектор пар вершин(вектор рёбер)
	vector<pair<int, int>> edges_inc;     // вектор рёбер инцидентных вершине v / исходящих из вершины v
	edges = list_of_edges_pairs();        // получаем все пары вершин графа

	// обходим эти пары. Если граф неориентированный, то там будет пара (v,n) и (n, v) - достаточно рассмотреть для инцидентности первый элемент. В орграфе - исходящий элемент всегда первый
	for (int i = 0; i < edges.size(); i++)
	{
		// рассматриваем первый элемент пары
		if (edges[i].first == v)
		{
			// помещаем в списо ребер, инцидентных вершине данное ребро
			edges_inc.push_back(edges[i]);
			// увеличиваем счётчик
			count = count + 1;
		}//if (edges[i].first == v)
	}//for i

	// возвращаем  список всех рёбер графа, инцидентных вершине v / исходящих из вершины v
	return(edges_inc);
}




/*------------------------------------------------------------------------*/
/*                Функции               */
/*--------------------------------------*/

// сохранение графа как фотографии
string drawGraph(const vector<vector<int>>& adjacencyMatrix)
{
	// Проверяем размер матрицы смежности. Если больше 19, то считаем ее слишком большой
	if (adjacencyMatrix.size() <= 19)
	{
		bool key = false;
		// Проверяем наличие весов на ребрах, чтобы понять, нужно ли указывать их при выводе
		for (int i = 0; i < adjacencyMatrix.size(); i++)
		{
			for (int j = 0; j < adjacencyMatrix.size(); j++)
			{
				// Если вес ребра больше 1 или отрицательный, значит, нужно указывать вес в выводе
				if (adjacencyMatrix[i][j] > 1 || adjacencyMatrix[i][j] < 0)
					key = true;
			}
		}

		// Открываем файл для записи графа в формате DOT
		std::ofstream file;
		file.open("graph.dot");
		file << "digraph G {" << endl;

		if (key)
		{
			// Выводим граф с указанием весов ребер
			for (int i = 0; i < adjacencyMatrix.size(); i++)
			{
				for (int j = 0; j < adjacencyMatrix[i].size(); j++)
				{
					// Проверяем, что вес ребра не равен 0, чтобы не выводить ненужные ребра
					if (adjacencyMatrix[i][j] != 0)
					{
						// Выводим ребро с указанием веса в формате DOT
						file << i << " -> " << j << " [label=\"" << adjacencyMatrix[i][j] << "\"];" << endl;
					}// if (adjacencyMatrix[i][j] != 0) 
				}// for j
			}// for i
		}

		else
		{
			// Выводим граф без указания весов ребер
			for (int i = 0; i < adjacencyMatrix.size(); i++)
			{
				for (int j = 0; j < adjacencyMatrix[i].size(); j++)
				{
					// Проверяем, что вес ребра равен 1, чтобы не выводить ненужные ребра
					if (adjacencyMatrix[i][j] == 1)
					{
						// Выводим ребро без указания веса в формате DOT
						file << i << " -> " << j << ";" << endl;
					}//if (adjacencyMatrix[i][j] == 1) 
				}// for j
			}// for i
		}// if key

		// Закрываем файл и сохраняем результаты
		file << "}" << std::endl;
		file.close();

		// Генерируем изображение графа в формате PNG с помощью утилиты DOT
		system("dot -Tpng graph.dot -o graph.png");
		cout << "\n\nGraph image saved as graph.png" << endl;
	}

	// Выводим, что граф большой для рисования
	else
	{
		cout << "\n\nGraph image is not saved as graph.png. It is too big" << endl;
	}
	// возвращаем картинку для открытия силами OpenCV
	return "graph.png";
}


// вывод графа на экран
void OpenImage(const vector<vector<int>>& adjacencyMatrix)
{
	// Проверяем размерность матрицы смежности
	if (adjacencyMatrix.size() <= 19)
	{
		// Получаем путь к изображению, созданному с помощью функции drawGraph
		string imagePath = drawGraph(adjacencyMatrix);
		// Загружаем изображение с помощью OpenCV
		cv::Mat img = cv::imread(imagePath, -1);

		// Проверяем, удалось ли загрузить изображение
		if (img.empty()) {
			cout << "Could not open or find the image" << endl;
			return;
		}

		// Создаем окно с названием "Graph"
		cv::namedWindow("Graph", cv::WINDOW_NORMAL);
		// Показываем изображение в окне
		cv::imshow("Graph", img);
		// Ждем, пока пользователь нажмет любую клавишу
		cv::waitKey(0);
		// Закрываем окно
		cv::destroyWindow("Graph");
		return;
	}// if (adjacencyMatrix.size() <= 19)
}


// вывод матрицы смежности на экран
void PrintMatrix(vector<vector<int>> matrix)
{
	// отключаем русский язык
	setlocale(0, "C");            // выводим массив в красивых скобках
	cout << setw(2) << setfill(' ') << (char)218 << (char)196 << (char)196 << setw(matrix.size() * 2 + 7) << setfill(' ') << (char)196 << (char)196 << (char)191 << endl;          // вывод верхних квадратных скобок

	// идём по строкам
	for (int i = 0; i < matrix.size(); i++)
	{
		cout << setw(5) << setfill(' ');
		// идём по столбцам
		for (int j = 0; j < matrix.size(); j++)
		{
			// выводим элемент матрицы
			cout << matrix[i][j] << " ";
		}// for j

		cout << endl;
	}// for i
	cout << setw(2) << setfill(' ') << (char)192 << (char)196 << (char)196 << setw(matrix.size() * 2 + 7) << setfill(' ') << (char)196 << (char)196 << (char)217 << endl;          // вывод верхних квадрат
	// подключаем русский язык
	setlocale(LC_ALL, "Russian");

	// возвращаем обещанное значение
	return;
}


// печать справки и авторов работы
void Usloviya()
{
	cout << "\n\t\t\t\t/********************************************************************************\n";
	cout << "\t\t\t\t* Л А Б О Р А Т О Р Н А Я   Р А Б О Т А  №6  З А   5   С Е М Е С Т Р   С  +  +  *\n";
	cout << "\t\t\t\t*-------------------------------------------------------------------------------*\n";
	cout << "\t\t\t\t* Project Type  : Win64 Console Application                                     *\n";
	cout << "\t\t\t\t* Project Name  : Teor_Grph_Lab6                                                *\n";
	cout << "\t\t\t\t* File Name     : Lab6. CPP                                                     *\n";
	cout << "\t\t\t\t* Programmer(s) : Викулов Д.Г.  &   Сашин А. Ю.                                 *\n";
	cout << "\t\t\t\t* Modifyed By   :                                                               *\n";
	cout << "\t\t\t\t* Created       : 06/10/23                                                      *\n";
	cout << "\t\t\t\t* Last Revision : 12/10/23                                                      *\n";
	cout << "\t\t\t\t********************************************************************************/\n";

	cout << "\n\t\t\t\t\t\t\t\x1b[31m   С П Р А В К А : \n\n\x1b[30m";
	// Выводим условия в таблице
	setlocale(0, "C");                       // отключаем русский язык
	cout << char(218) << setw(40) << setfill((char)196) << (char)191 << endl << (char)179;  // выводим верхнюю строку шапки
	setlocale(LC_ALL, "Rus");                // подключаем русский язык
	cout << " Выберите одно значние из списка:      ";
	setlocale(0, "C");                       // отключаем русский язык
	cout << (char)179 << endl << (char)195 << setw(5) << setfill((char)196) << (char)194 << setw(35) << setfill((char)196) << (char)180 << setfill(' ') << endl << (char)179;    // выводим нижнюю строку шапки с разделителем между номером и названием алгоритма
	cout << "  e " << (char)179 << "  Edges_list_file_path            ";                                                                                                         // выводим условия выбора и нижнюю с боковыми строчками таблицы
	cout << (char)179 << endl << (char)195 << setw(5) << setfill((char)196) << (char)197 << setw(35) << setfill((char)196) << (char)180 << endl << (char)179;
	cout << "  m " << (char)179 << "  Adjacency_matrix_file_path      ";
	cout << (char)179 << endl << (char)195 << setw(5) << setfill((char)196) << (char)197 << setw(35) << setfill((char)196) << (char)180 << endl << (char)179;
	cout << "  l " << (char)179 << "  Adjacency_list_file_path        ";
	cout << (char)179 << endl << (char)195 << setw(5) << setfill((char)196) << (char)197 << setw(35) << setfill((char)196) << (char)180 << endl << (char)179;
	cout << "  o " << (char)179 << "  Output_file_path                ";
	cout << (char)179 << endl << (char)192 << setw(5) << setfill((char)196) << (char)193 << setw(35) << setfill((char)196) << (char)217 << endl;
	cout << endl;
	setlocale(LC_ALL, "Rus");               // подключаем русский язык

	return;                                 // возвращаем обещанное значение
}

// печать условий выбора алгоритма
void Usloviya_1()
{
	// Выводим условия в таблице
	setlocale(0, "C");                       // отключаем русский язык
	cout << char(218) << setw(40) << setfill((char)196) << (char)191 << endl << (char)179;  // выводим верхнюю строку шапки
	setlocale(LC_ALL, "Rus");                // подключаем русский язык
	cout << " Выберите одно значние из списка:      ";
	setlocale(0, "C");                       // отключаем русский язык
	cout << (char)179 << endl << (char)195 << setw(5) << setfill((char)196) << (char)194 << setw(35) << setfill((char)196) << (char)180 << setfill(' ') << endl << (char)179;    // выводим нижнюю строку шапки с разделителем между номером и названием алгоритма
	cout << "  d " << (char)179 << " Dijkstra 's algorithm            ";                                                                                                         // выводим условия выбора и нижнюю с боковыми строчками таблицы
	cout << (char)179 << endl << (char)195 << setw(5) << setfill((char)196) << (char)197 << setw(35) << setfill((char)196) << (char)180 << endl << (char)179;
	cout << "  b " << (char)179 << " The Bellman-Ford-Moore algorithm ";
	cout << (char)179 << endl << (char)195 << setw(5) << setfill((char)196) << (char)197 << setw(35) << setfill((char)196) << (char)180 << endl << (char)179;
	cout << "  t " << (char)179 << " The Levite algorithm             ";
	cout << (char)179 << endl << (char)192 << setw(5) << setfill((char)196) << (char)193 << setw(35) << setfill((char)196) << (char)217 << endl;
	cout << endl;
	setlocale(LC_ALL, "Rus");               // подключаем русский язык

	return;                                 // возвращаем обещанное значение
}



// Вспомогательная функция для нахождения индекса вершины с минимальным расстоянием
int findMinDistance(vector<int> distance,                         // вектор расстояний от начальной вершины до всех остальных
	                vector<bool> visited)                         // посещённость вершин
{
	int minDistance = INF;                                        // Минимальное расстояние - бесконечность
	int Dindex = -1;                                              // Изначально номер элемента выходит за пределы вектора

	// идём по всем нерассмотренным вершинам и выбираем ту, до которой расстояние минимально
	for (int i = 0; i < distance.size(); i++)
	{
		if (visited[i] == false && distance[i] < minDistance)
		{
			minDistance = distance[i];                            // запоминаем расстояние
			Dindex = i;                                           // запоминаем её номер
		}// if (visited[i] == false && distance[i] < minDistance) 
	}// for i

	// вернули обещанное значение
	return Dindex;
}


// Алгоритм Дейкстры для нахождения кратчайшего пути и вывода вершин геодезической цепи
void Dijkstra(vector<vector<int>> matrix,                         // исходная матрица для определения наличия пути между вершинами
	          int start,                                          // вершина, с которой начинается алгоритм
	          vector<int>& ways)                                  // расстояние от данной вершины до всех остальных в графе
{
	// вектор ошибки
	vector<int> error(1, -INF);

	// количество вершин в графе
	int Vertices = matrix.size();

	// вектор расстояний до каждой вершины. Изначально все элементы, а их Vertices штук являются бесконечностями
	vector<int> distance(Vertices, INF);

	// ни одна вершина графа не посещена
	vector<bool> visited(Vertices, false);


	// стартовая вершина сама в себя прийти не может -> дистанция равно нулю
	distance[start] = 0;

	// вершин в графе мы рассматриваем на 1 штуку меньше, так как начальная уже отброшена
	for (int i = 0; i < Vertices - 1; i++)
	{
		// текущая рассматриваемая вершина берётся из непосесщенных, для которых расстояние от исходной минимально
		int current = findMinDistance(distance, visited);


		// если нет вершин для посещения - возвращаем то, что уже есть
		if (current == -1)
		{
			ways = distance;
			return;
		}// if (current == -1)

		// эта вершина помечается в векторе как посещённая
		visited[current] = true;

		for (int j = 0; j < Vertices; j++)
		{	// перебираем уже все вершины смежные с данной(с наименьшим весом) по матрице смежности по следующим правилам:
			// если вершина не посещена и сушествует путь из данной вершины, причем сумма путей из данной вершины до новой должна быть меньше, чем путь, которых уже хранит за собой эта новая вершина
			if (matrix[current][j] != 0 && visited[j] == false && distance[current] + matrix[current][j] < distance[j])
			{
				// устанавливаем для новой вершины новое значение веса
				distance[j] = distance[current] + matrix[current][j];

			}// if
		}// for j
	}// for i

	// сохраняем весь путь для данной вершины
	ways = distance;

	// возвращаем обещанное значение
	return;
}



// Алгоритм Белмана-Форда-Мура
void BellForMur(vector<vector<int>>graph,                         // матрица смежности графа с добавленной нулевой вершиной
	            vector<int>& ways,                                // кратчайшие расстояния от этой вершины до всех остальных
	            int start,                                        // индекс добавленной вершины
                bool print)                                       // флаг печати в файл
{
	// заполняем вектор 
	vector<int> distances(graph.size(), INF);

	// количество вершин графа, до которых нужно найти кратчайшие пути
	int V = distances.size();

	// начальная вершина вершина сама в себя придти не может -> расстояние до неё равно нулю
	distances[start] = 0;

	// Проходим по всем ребрам графа V-1 раз
	for (int i = 1; i <= V - 1; i++)
	{
		// Проходим по всем вершинам графа
		for (int u = 0; u < V; u++)
		{
			// Проходим по всем вершинам, связанным с вершиной u
			for (int v = 0; v < V; v++)
			{
				// Если существует ребро (u, v) и новое расстояние до вершины v меньше, чем текущее расстояние,
				// то обновляем текущее расстояние до вершины v
				if (graph[u][v] != 0 && distances[u] != INF && distances[u] + graph[u][v] < distances[v])
				{
					// обновляем дистанцию
					distances[v] = distances[u] + graph[u][v];
				}// if
			}// for v
		}// for u
	}// for i

	// Дополнительный цикл для обнаружения отрицательных циклов
	// Если в процессе обновления расстояний находится более короткий путь до вершины, то это означает, что существует отрицательный цикл в графе.
	for (int u = 0; u < V; u++)
	{
		for (int v = 0; v < V; v++)
		{
			if (graph[u][v] != 0 && distances[u] != INF && distances[u] + graph[u][v] < distances[v])
			{
				// Обнаружен отрицательный цикл
				cout << "\n\x1b[31m Graph contains a negative cycle! \x1b[30m\n";
				// выводим в файл
				if (print)
				{
					fout << "\n Graph contains a negative cycle! \n";
				}
				// заканчиваем программу с ошибкой из функции
				exit(0);
			}
		}
	}

	// сохраняем весь путь для данной вершины
	ways = distances;

	// возвращаем обещанное значение
	return;
}


// Алгоритм Левита
void Levit(vector<vector<int>> m_matrix,                          // матрица смежности графа
	       vector<int>& ways,                                     // матрица расстояний от данной вершины до всех остальных
	       int StartVertex,                                       // вершина, от которой будем смотреть расстояния
           bool print)                                            // флаг печати в файл
{
	vector <int> distance(m_matrix.size(), INF);                  // массив расстояний. Изначально там - бесконечности
	distance[StartVertex] = 0;                                    // расстояние у начальной вершины до себя = 0

	//vector <int> M0;       // массив необратботанных вершин, сначала туда помещаются все веришны (вместо него используется вектор sets, как в алгоритме Борувчика)
	queue <int> M1;          // вершины, расстояния до которых вычисляется  
	//vector <int> M2;       // массив предположительно обработанных вершины (вместо него используется вектор sets, как в алгоритме Борувчика)


	// вектор, показывающий наличие цикла отрицательного веса
	vector <int> count(m_matrix.size(), 0);
	// массив, который показывает к какому множеству (M0,M1,M2) принадлежит вершина
	vector <int> sets(m_matrix.size());

	sets[StartVertex] = 1; // начальная вершина принадлежит множеству M1
	M1.push(StartVertex);  // кладём начальную вершину в очередь M1

	// заполняем вектор M0 всеми вершинами, кроме начальной вершины
	for (int i = 0; i < m_matrix.size(); i++)
	{
		if (i != StartVertex)
		{
			// помечаем в множестве, что вершина принадлежит нулевому множеству
			sets[i] = 0;
		}// if
	}// for i

	// продолжаем, пока в очереди M1 есть вершины
	while (!M1.empty())
	{
		// выбираем очередную веришну из очереди M1
		int V = M1.front();
		// проходим по соседям данной вершины
		for (int j = 0; j < m_matrix.size(); j++)
		{
			// путь между текущей вершиной и очередной - не нулевой. Очередная вершина будет соседом
			if (m_matrix[V][j] != 0)
			{
				// если этот очередной сосед принадлежит множеству M0
				if (sets[j] == 0)
				{
					// устанавливаем расстояние до него через вершину V
					distance[j] = distance[V] + m_matrix[V][j];
					// увеличиваем число путей до данной вершины (отслеживаем их количество)
					count[j] = count[j] + 1;
					M1.push(j);  // перенос соседа в очередь М1 (фактический)
					sets[j] = 1; // перенос соседа в очередь М1 (флаг)

					// если число путей до этой вершины превышает число вершин -> в графе присутствует цикл отрицательного веса
					if (count[j] > m_matrix.size())
					{
						cout << "\n\x1b[31m Graph contains a negative cycle! \x1b[30m\n";

						// выводим в файл
						if (print)
						{
							fout << "\n Graph contains a negative cycle! \n";
						}
						// заканчиваем программу из функции
						exit(0);
					}// if
				}// if

				// если этот очередной элемент принадлежит множеству M1
				else if (sets[j] == 1)
				{
					// смотрим: меньше ли расстояние от текущей вершины до соседа или сама метка соседа уже меньше, чем это расстояние.
					// выбираем минимальное значение
					distance[j] = min(distance[j], distance[V] + m_matrix[V][j]);
				}// else if

				// если этот очередной элемент принадлежит множеству M2
				else if (sets[j] == 2)
				{
					// если новое расстояние меньше старого расстояния
					if (distance[j] > distance[V] + m_matrix[V][j])
					{
						// устанавливаем новое расстояние до вершины M2
						distance[j] = distance[V] + m_matrix[V][j];

						M1.push(j);   // перенос её в очередь М1   (фактический перенос)
						sets[j] = 1;  // перенос её в очередь М1   (перенос флага)
						// увеличиваем число путей до данной вершины (отслеживаем их количество)
						count[j] = count[j] + 1;

						// значение count[j] становится больше, чем размер графа (m_matrix.size()), это означает наличие отрицательного
						// цикла в графе. В таком случае выводится сообщение о наличии отрицательного цикла, и программа завершает свою работу.
						if (count[j] > m_matrix.size())
						{
							cout << "\n\x1b[31m Graph contains a negative cycle! \x1b[30m\n";

							// выводим в файл
							if (print)
							{
								fout << "\n Graph contains a negative cycle! \n";
							}

							// завершаем программу из функции
							exit(0);
						}// if (count[j] > m_matrix.size())

					}// if (distance[j] > distance[V] + m_matrix[V][j]) 

				}// else if (sets[j] == 2)

			}//if (m_matrix[V][j] != 0)

		}// for j

		M1.pop();        // удаляем первый элемент очереди
		sets[V] = 2;     // помечаем, что вершина V принадлежит множеству M2 - она отработана

	}// while

	// сохраняем весь путь для данной вершины
	ways = distance;

	// возвращаем обещанное значение
	return;
}


// печать расстояний от данной вершины до остальных на экран
void print_distance(vector<int> distance,                         // вектор расстояний от данной вершины до всех остальных
	                int StartVertex)                              // начальная вершина, чтобы не выводить путь саму в себя
{
	// идём по всем элементам массива расстояний
	for (int i = 0; i < distance.size(); i++)
	{
		// если номер данной вершины не совпадает со стартовой (не будем выводить пути в себя)
		if (i != StartVertex)
		{
			// выводим в на экран пару и расстояние
			cout << " " << StartVertex + 1 << " - " << i + 1 << ": " << distance[i] << endl;
		}// if
	}// for i

	// возвращаем обещанное значение
	return;
}


// печать расстояний от данной вершины до остальных в файл
void print_distanceToFile(vector<int> distance,                   // вектор расстояний от данной вершины до всех остальных
	                      int StartVertex)                        // начальная вершина, чтобы не выводить путь саму в себя
{
	// идём по всем элементам массива расстояний
	for (int i = 0; i < distance.size(); i++) // вывод результат
	{
		// если номер данной вершины не совпадает со стартовой (не будем выводить пути в себя)
		if (i != StartVertex)
		{
			// выводим в файл пару и расстояние
			fout << " " << StartVertex + 1 << " - " << i + 1 << ": " << distance[i] << endl;
		}// if
	}// for i

	// возвращаем обещанное значение
	return;
}


// вывод матрицы  в файл
void PrintMatrToFile(vector<vector<int>> matrix)                 // матрица, которую необходимо вывести в файл. Передача по значению
{
	// идём по строкам матрицы
	for (int i = 0; i < matrix.size(); i++)
	{
		fout << " ";
		// идём по столбцам матрицы
		for (int j = 0; j < matrix.size(); j++)
		{
			// выводим очередной элемент матрицы в файл
			fout << matrix[i][j] << " ";
		}// for j
		fout << endl;
	}// for i

	// возвращаем обещанное значение
	return;
}

/*------------------------------------------------------------------------*/
/*            Главная функция           */
/*--------------------------------------*/
int main()
{
	// подключаем русский язык
	setlocale(LC_ALL, "Russian");
	// цвет консоли - белый
	system("color F0");
	// флаг печати в файл. Изначально - печати нет
	bool print = false;
	// ключ, введённый пользователем для печати
	char letter;
	cout << "\t\t\t\t\t\t\x1b[34m    Р А Б О Т А   С   Г Р А Ф А М И\x1b[30m\n\n\n";
	// создали объект графа. Конструктор применился по-умолчанию
	Graph NewGraph;

	// Выбор, хочет ли пользователь выводить в файл вычесленную информацию
	cout << " Хотите ли Вы выводить данные в файл? Введите <o>, если хотите, или любой другой символ - если нет. Введите: ";
	cin >> letter;                             // ввод пользователем
	cout << "\n Вы ввели: " << letter;         // эхо-печать

	// Если пользователь хочет печатать. Устанавливаем флаг
	if (letter == 'o' || letter == 'O')
	{
		// устанавливаем флаг того, что нужно выводить данные в файл
		print = true;

		fout.open(FNAMEOUT);           // связываем объект с файлом
		if (!fout.is_open())           // файл не найден
		{
			cout << "Файла с таким именем нет. Невозможно осуществить чтение";
			fin.close();               // закрыть файл для чтения
			system("pause");
			exit(0);                   // возвращаем значение, соответствующее типу в caller
		}// if (!fout.is_open())
	}// if (letter == 'o' || letter == 'O')

	// Выводим матрицу смежности по данным из файла на экран
	cout << "\n\n\t\t\t\t\t\x1b[35m М А Т Р И Ц А   С М Е Ж Н О С Т И   П О   И С Х О Д Н Ы М   Д А Н Н Ы М :\x1b[30m\n\n";
	PrintMatrix(NewGraph.adjacency_matrix());

	// пользователь захотел печатать в файл
	if (print)
	{
		// выводим общую информацию в файл
		fout << "\t\t\t\t\t\t    Р А Б О Т А   С   Г Р А Ф А М И\n\n\n";
		fout << "\n\n М А Т Р И Ц А   С М Е Ж Н О С Т И   П О   И С Х О Д Н Ы М   Д А Н Н Ы М :\n\n";
		// выводим матрицу смежности в файл
		PrintMatrToFile(NewGraph.adjacency_matrix());
		fout << endl;
	}// if

	// РАБОТА НЕПОСРЕДСТВЕННО С АЛГОРИТМАМИ
	vector<int> distances; // массив расстояний от данной вершины до всех остальных
	char key;              // ключ пользователя для выбора алгоритма
	char beg_vertex;       // хочет ли пользователь задать начальную вершину
	int Start_Vertex;      // начальная вершина для работы алгоритма
	cout << "\n\x1b[33m  В В Е Д И Т Е   О Д И Н  И З  С Л Е Д У Ю Щ И Й  К Л Ю Ч Е Й: \x1b[30m\n";

	// вывод таблички с условиями для выбора ключа
	Usloviya_1();
	cout << " ВВОД: ";
	// ввод ключа выбора алгоритма для работы
	cin >> key;
	cout << " Вы ввели: " << key << endl;
	// Вопрос на явную ошибку пользователя, т.к без начальной вершины программа заведомо работать не будет
	cout << " Хотите ли Вы задать начальную вершину? Введите <n>, если хотите, или любой другой символ - если нет. Введите: ";
	// ввод решения пользователя
	cin >> beg_vertex;

	// если пользователь захотел задать начальную вершину
	if (beg_vertex == 'n' || beg_vertex == 'N')
	{
		// просим пользователя ввести номер начальной вершины
		cout << "\n\n\x1b[32m В В Е Д И Т Е   Н О М Е Р   Н А Ч А Л Ь Н О Й   В Е Р Ш И Н Ы: \x1b[30m";
		// ввод номера начальной вершины
		cin >> Start_Vertex;
		// эхо-печать
		cout << "\n Вы ввели: " << Start_Vertex << endl;
	}
	// иначе - пользователь не захотел задавать начальную вершину - выход из программы с ошибкой
	else
	{
		cout << "\n\x1b[31m ОШИБКА!!!Алгоритмы не могут работать без задания начальной вершины. Задайте её номер и перезапустите программу!!!\x1b[30m\n ";
		// выходим с ошибкой
		return -1;
	}// if

	// для пользователя вершина будет на 1 больше, чем те, с которыми мы будем работать в программе
	Start_Vertex = Start_Vertex - 1;
	//наличие рёбер отрицательного веса
	bool weight = false;
	// проверяем наличие рёбер отрицательного веса в графе
	for (int i = 0; i < NewGraph.GetSize(); i++)
	{
		// идём по стобцам матрицы смежности
		for (int j = 0; j < NewGraph.GetSize(); j++)
		{
			// если очередной элемент матрицы - отрицательный - помечаем флаг
			if (NewGraph.adjacency_matrix()[i][j] < 0)
			{
				weight = true;
			}// if
		}// for j
	}// for j


	// в зависимости от ключа выбора алгоритма выполняем необходимый вариант
	switch (key)
	{
	
	// пользователь выбрал Дейкстру
	case('d'):
	case('D'):
	{
		// проверка наличия рёбер отрицательного веса - Дейкстра с ними не работает
		if(weight)
		{ 
			cout << "\n\x1b[31m ОШИБКА!!! Дейкстра не работает для графа с отрицательными рёбрами. Выберите другой алгоритм! и перезапустите программу\n\x1b[30m";
			return -2;
		}

		cout << "\n\t\t\t\t\t\t\t\x1b[35m А Л Г О Р И Т М   Д Е Й К С Т Р Ы \n\x1b[30m";
		// Вызываем алгоритм Дейкстры, если нет рёбер отрицательного веса
		Dijkstra(NewGraph.adjacency_matrix(), Start_Vertex, distances);
		break;
	}

	// выбрали алгоритм Белмана - Форда - Мура
	case('b'):
	case('B'):
	{
		cout << "\n\t\t\t\t\t\t\x1b[35m А Л Г О Р И Т М   Б Е Л Л М А Н А - Ф О Р Д А - М У Р А\n\x1b[30m";
		// вызываем алгоритм. Белман-Форд-Мур может работать с отрицательными весами
		BellForMur(NewGraph.adjacency_matrix(), distances, Start_Vertex, print);
		break;
	}
	
	// выбрали алгоритм Левита
	case('t'):
	case('T'):
	{
		cout << "\n\t\t\t\t\t\t\t\x1b[35m   А Л Г О Р И Т М   Л Е В И Т А \n\x1b[30m";
		// вызываем алгоритм. Левит может работать с отрицательными весами
		Levit(NewGraph.adjacency_matrix(), distances, Start_Vertex, print);
		break;
	}

	// иначе - пользователь ввёл не тот ключ. Заканчиваем программу с ошибкой
	default:
		cout << "\n\x1b[31m ПЕРЕЗАПУСТИТЕ ПРОГРАММУ И ВВЕДИТЕ ЗНАЧЕНИЕ ИЗ СПИСКА КЛЮЧЕЙ ПРИ ВЫБОРЕ АЛГОРИТМА!!!\n\x1b[30m";
		// закрываем файл считывания
		exit(0);
	}

	// выводим полученный массив расстояний, полученный после работы одного из алгоритмов на экран
	cout << "\n\n\t\t\t\t\t\t\t\x1b[36m М А С С И В   Р А С С Т О Я Н И Й:\x1b[30m\n\n";
	
	// нет ребёр отрицательного веса
	if (!weight)
	{
		cout << " Graph does not contain edges with negative weight.\n\n";
		if (print)
		{
			fout << " Graph does not contain edges with negative weight.\n\n";
		}// if
	}

	// рёбра отрицательного веса есть
	else
	{
		cout << " Graph contains edges with negative weight.\n\n";
		if (print)
		{
			fout << " Graph contains edges with negative weight.\n\n";
		}// if
	}

	print_distance(distances, Start_Vertex);

	// выводим полученный массив расстояний, полученный после работы одного из алгоритмов в файл
	if (print)
	{
		fout << "\n\n\t\t\t\t\t\t\t\t М А С С И В   Р А С С Т О Я Н И Й:\n\n";
		print_distanceToFile(distances, Start_Vertex);
	}// if

	// Выводим картинку с графом на экран
	OpenImage(NewGraph.adjacency_matrix());

	// закрыть файл для записи
	fout.close();
	// возвращаем обещанное значение в функцию
	return 0;
}
